diff --git a/netwerk/test/unit/test_tls_flags_separate_connections.js b/netwerk/test/unit/test_tls_flags_max_version.js
copy from netwerk/test/unit/test_tls_flags_separate_connections.js
copy to netwerk/test/unit/test_tls_flags_max_version.js
--- a/netwerk/test/unit/test_tls_flags_separate_connections.js
+++ b/netwerk/test/unit/test_tls_flags_max_version.js
@@ -1,114 +1,105 @@
 Cu.import("resource://testing-common/httpd.js");
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 XPCOMUtils.defineLazyGetter(this, "URL", function() {
-  return "http://localhost:" + httpserv.identity.primaryPort;
+  return "https://localhost:" + httpserv.identity.primaryPort;
 });
 
-// This unit test ensures connections with different tlsFlags have their own
-// connection pool. We verify this behavior by opening channels with different
-// tlsFlags, and their connection info's hash keys should be different.
+// This unit test ensures connections with different max version in tlsFlags have
+// have different initiated protocol version. We verify this behavior by opening
+// channels with different TLS max version, and their protocol version used should
+// be different.
 
-// In the first round of this test, we record the hash key for each connection.
-// In the second round, we check if each connection's hash key is consistent
-// and different from other connection's hash key.
+// In the first round of this test, we make connection and record the protocol
+// version for each connection. In the second round, we check if each connection's
+// protocol version is consistent and different from other connection's protocol.
 
 let httpserv = null;
 let gSecondRoundStarted = false;
 
-let randomFlagValues = [
-    0x00000000,
-
-    0xFFFFFFFF,
-
-    0x12345678,
-    0x12345678,
-
-    0x11111111,
-    0x22222222,
-
-    0xAAAAAAAA,
-    0x77777777,
-
-    0xBBBBBBBB,
-    0xCCCCCCCC
-];
+let maxVersionValues = [1, 2, 3, 4];
 
 function handler(metadata, response) {
   response.setHeader("Content-Type", "text/plain", false);
   response.setHeader("Cache-Control", "no-cache", false);
   response.setStatusLine(metadata.httpVersion, 200, "OK");
   let body = "0123456789";
   response.bodyOutputStream.write(body, body.length);
 }
 
-function makeChan(url, tlsFlags) {
+function makeChan(url, maxVersion) {
   let chan = NetUtil.newChannel({ uri: url, loadUsingSystemPrincipal: true });
   chan.QueryInterface(Ci.nsIHttpChannelInternal);
-  chan.tlsFlags = tlsFlags;
+  chan.tlsFlags = 0;
+  chan.tlsFlags |= (maxVersion << 0);
 
   return chan;
 }
 
-let previousHashKeys = {};
+let previousProtocolVersion = {};
 
-function Listener(tlsFlags) {
-  this.tlsFlags = tlsFlags;
+function Listener(maxVersion) {
+  this.maxVersion = maxVersion;
 }
 
 let gTestsRun = 0;
 Listener.prototype = {
   onStartRequest: function(request, context) {
     request.QueryInterface(Ci.nsIHttpChannel)
            .QueryInterface(Ci.nsIHttpChannelInternal);
 
-    do_check_eq(request.tlsFlags, this.tlsFlags);
+    do_check_eq(request.tlsFlags & 7, this.maxVersion);
 
-    let hashKey = request.connectionInfoHashKey;
+//    let securityInfo = request.securityInfo;
+//    securityInfo.QueryInterface(Ci.nsISSLStatusProvider);
+//    securityInfo.SSLStatus.QueryInterface(Ci.nsISSLStatus);
+//    let protocolVersion = securityInfo.SSLStatus.protocolVersion;
+    let protocolVersion = 0;
+
     if (gSecondRoundStarted) {
-      // Compare the hash keys with the previous set ones.
-      // Hash keys should match if and only if their tlsFlags are the same.
-      for (let tlsFlags of randomFlagValues) {
-        if (tlsFlags == this.tlsFlags) {
-          do_check_eq(hashKey, previousHashKeys[tlsFlags]);
+      // Compare the protocol versions with the previous set ones.
+      // Protocol versions should match if and only if their max versions are the same.
+      for (let maxVersion of maxVersionValues) {
+        if (maxVersion == this.maxVersion) {
+          do_check_eq(maxVersion, previousProtocolVersion[maxVersion]);
         } else {
-          do_check_neq(hashKey, previousHashKeys[tlsFlags]);
+          do_check_neq(maxVersion, previousProtocolVersion[maxVersion]);
         }
       }
     } else {
-      // Set the hash keys in the first round.
-      previousHashKeys[this.tlsFlags] = hashKey;
+      // Set the protocol versions in the first round.
+      previousProtocolVersion[this.protocolVersion] = protocolVersion;
     }
   },
   onDataAvailable: function(request, ctx, stream, off, cnt) {
     read_stream(stream, cnt);
   },
   onStopRequest: function() {
     gTestsRun++;
-    if (gTestsRun == randomFlagValues.length) {
+    if (gTestsRun == maxVersionValues.length) {
       gTestsRun = 0;
       if (gSecondRoundStarted) {
         // The second round finishes.
         httpserv.stop(do_test_finished);
       } else {
         // The first round finishes. Do the second round.
         gSecondRoundStarted = true;
         doTest();
       }
     }
   },
 };
 
 function doTest() {
-  for (let tlsFlags of randomFlagValues) {
-    let chan = makeChan(URL, tlsFlags);
-    let listener = new Listener(tlsFlags);
+  for (let maxVersion of maxVersionValues) {
+    let chan = makeChan(URL, maxVersion);
+    let listener = new Listener(maxVersion);
     chan.asyncOpen2(listener);
   }
 }
 
 function run_test() {
   do_test_pending();
   httpserv = new HttpServer();
   httpserv.registerPathHandler("/", handler);
diff --git a/netwerk/test/unit/xpcshell.ini b/netwerk/test/unit/xpcshell.ini
--- a/netwerk/test/unit/xpcshell.ini
+++ b/netwerk/test/unit/xpcshell.ini
@@ -392,8 +392,9 @@ skip-if = os == "android"
 [test_race_cache_with_network.js]
 [test_channel_priority.js]
 [test_bug1312774_http1.js]
 [test_1351443-missing-NewChannel2.js]
 [test_bug1312782_http1.js]
 [test_bug1355539_http1.js]
 [test_bug1378385_http1.js]
 [test_tls_flags_separate_connections.js]
+[test_tls_flags_max_version.js]
diff --git a/security/manager/ssl/SharedSSLState.cpp b/security/manager/ssl/SharedSSLState.cpp
--- a/security/manager/ssl/SharedSSLState.cpp
+++ b/security/manager/ssl/SharedSSLState.cpp
@@ -112,18 +112,19 @@ PrivateBrowsingObserver::Observe(nsISupp
                                  const char16_t *aData)
 {
   if (!nsCRT::strcmp(aTopic, "last-pb-context-exited")) {
     mOwner->ResetStoredData();
   }
   return NS_OK;
 }
 
-SharedSSLState::SharedSSLState()
+SharedSSLState::SharedSSLState(uint32_t aTlsFlags)
 : mClientAuthRemember(new nsClientAuthRememberService)
+, mIOLayerHelpers(aTlsFlags)
 , mMutex("SharedSSLState::mMutex")
 , mSocketCreated(false)
 , mOCSPStaplingEnabled(false)
 , mOCSPMustStapleEnabled(false)
 {
   mIOLayerHelpers.Init();
   mClientAuthRemember->Init();
 }
diff --git a/security/manager/ssl/SharedSSLState.h b/security/manager/ssl/SharedSSLState.h
--- a/security/manager/ssl/SharedSSLState.h
+++ b/security/manager/ssl/SharedSSLState.h
@@ -14,17 +14,18 @@ class nsClientAuthRememberService;
 class nsIObserver;
 
 namespace mozilla {
 namespace psm {
 
 class SharedSSLState {
 public:
   NS_INLINE_DECL_THREADSAFE_REFCOUNTING(SharedSSLState)
-  SharedSSLState();
+  SharedSSLState() : SharedSSLState(0) {}
+  explicit SharedSSLState(uint32_t aTlsFlags);
 
   static void GlobalInit();
   static void GlobalCleanup();
 
   nsClientAuthRememberService* GetClientAuthRememberService() {
     return mClientAuthRemember;
   }
 
diff --git a/security/manager/ssl/nsNSSIOLayer.cpp b/security/manager/ssl/nsNSSIOLayer.cpp
--- a/security/manager/ssl/nsNSSIOLayer.cpp
+++ b/security/manager/ssl/nsNSSIOLayer.cpp
@@ -39,16 +39,17 @@
 #include "pkix/pkixtypes.h"
 #include "prmem.h"
 #include "prnetdb.h"
 #include "secder.h"
 #include "secerr.h"
 #include "ssl.h"
 #include "sslerr.h"
 #include "sslproto.h"
+#include "sslexp.h"
 
 using namespace mozilla;
 using namespace mozilla::psm;
 
 //#define DEBUG_SSL_VERBOSE //Enable this define to get minimal
                             //reports when doing SSL read/write
 
 //#define DUMP_BUFFER  //Enable this define along with
@@ -1349,21 +1350,22 @@ nsSSLIOLayerPoll(PRFileDesc* fd, int16_t
   // it reaches any point that would be unsafe to send/receive something before
   // cert validation is complete.
   int16_t result = fd->lower->methods->poll(fd->lower, in_flags, out_flags);
   MOZ_LOG(gPIPNSSLog, LogLevel::Verbose,
           ("[%p] poll SSL socket returned %d\n", (void*) fd, (int) result));
   return result;
 }
 
-nsSSLIOLayerHelpers::nsSSLIOLayerHelpers()
+nsSSLIOLayerHelpers::nsSSLIOLayerHelpers(uint32_t aTlsFlags)
   : mTreatUnsafeNegotiationAsBroken(false)
   , mTLSIntoleranceInfo()
   , mVersionFallbackLimit(SSL_LIBRARY_VERSION_TLS_1_0)
   , mutex("nsSSLIOLayerHelpers.mutex")
+  , mTlsFlags(aTlsFlags)
 {
 }
 
 static int
 _PSM_InvalidInt(void)
 {
   MOZ_ASSERT_UNREACHABLE("I/O method is invalid");
   PR_SetError(PR_INVALID_METHOD_ERROR, 0);
@@ -1674,16 +1676,22 @@ nsSSLIOLayerHelpers::Init()
 }
 
 void
 nsSSLIOLayerHelpers::loadVersionFallbackLimit()
 {
   // see nsNSSComponent::setEnabledTLSVersions for pref handling rules
   uint32_t limit = Preferences::GetUint("security.tls.version.fallback-limit",
                                         3); // 3 = TLS 1.2
+
+  // set fallback limit if it is set in the tls flags
+  uint32_t tlsFlagsFallbackLimit = (mTlsFlags & (7 << 3)) >> 3;
+  if (tlsFlagsFallbackLimit)
+    limit = tlsFlagsFallbackLimit;
+
   SSLVersionRange defaults = { SSL_LIBRARY_VERSION_TLS_1_2,
                                SSL_LIBRARY_VERSION_TLS_1_2 };
   SSLVersionRange filledInRange;
   nsNSSComponent::FillTLSVersionRange(filledInRange, limit, limit, defaults);
   if (filledInRange.max < SSL_LIBRARY_VERSION_TLS_1_2) {
     filledInRange.max = SSL_LIBRARY_VERSION_TLS_1_2;
   }
 
@@ -2430,17 +2438,45 @@ nsSSLIOLayerSetOptions(PRFileDesc* fd, b
     }
   }
 
   SSLVersionRange range;
   if (SSL_VersionRangeGet(fd, &range) != SECSuccess) {
     return NS_ERROR_FAILURE;
   }
 
-  // Use infoObject->GetProviderTlsFlags() to get the TLS flags
+  // setting TLS max version
+  switch(infoObject->GetProviderTlsFlags() & 7) {
+    case 0:
+      // the default value will be used
+      break;
+
+    case 1:
+      range.max = SSL_LIBRARY_VERSION_TLS_1_0;
+      break;
+
+    case 2:
+      range.max = SSL_LIBRARY_VERSION_TLS_1_1;
+      break;
+
+    case 3:
+      range.max = SSL_LIBRARY_VERSION_TLS_1_2;
+      break;
+
+    case 4:
+      range.max = SSL_LIBRARY_VERSION_TLS_1_3;
+      break;
+  }
+  
+  // enabling alternative server hello
+  if (infoObject->GetProviderTlsFlags() & (1 << 6)) {
+    if (SECSuccess != SSL_UseAltServerHelloType(fd, PR_TRUE)) {
+      return NS_ERROR_FAILURE;
+    }
+  }
 
   if ((infoObject->GetProviderFlags() & nsISocketProvider::BE_CONSERVATIVE) &&
       (range.max > SSL_LIBRARY_VERSION_TLS_1_2)) {
     MOZ_LOG(gPIPNSSLog, LogLevel::Debug,
             ("[%p] nsSSLIOLayerSetOptions: range.max limited to 1.2 due to BE_CONSERVATIVE flag\n",
              fd));
     range.max = SSL_LIBRARY_VERSION_TLS_1_2;
   }
@@ -2563,18 +2599,23 @@ nsSSLIOLayerAddToSocket(int32_t family,
                         uint32_t providerTlsFlags)
 {
   nsNSSShutDownPreventionLock locker;
   PRFileDesc* layer = nullptr;
   PRFileDesc* plaintextLayer = nullptr;
   nsresult rv;
   PRStatus stat;
 
-  SharedSSLState* sharedState =
-    providerFlags & nsISocketProvider::NO_PERMANENT_STORAGE ? PrivateSSLState() : PublicSSLState();
+  SharedSSLState* sharedState = nullptr;
+
+  if (providerTlsFlags)
+    sharedState = new SharedSSLState(providerTlsFlags);
+  else
+    sharedState = (providerFlags & nsISocketProvider::NO_PERMANENT_STORAGE) ? PrivateSSLState() : PublicSSLState();
+
   nsNSSSocketInfo* infoObject = new nsNSSSocketInfo(*sharedState, providerFlags, providerTlsFlags);
   if (!infoObject) return NS_ERROR_FAILURE;
 
   NS_ADDREF(infoObject);
   infoObject->SetForSTARTTLS(forSTARTTLS);
   infoObject->SetHostName(host);
   infoObject->SetPort(port);
   infoObject->SetOriginAttributes(originAttributes);
diff --git a/security/manager/ssl/nsNSSIOLayer.h b/security/manager/ssl/nsNSSIOLayer.h
--- a/security/manager/ssl/nsNSSIOLayer.h
+++ b/security/manager/ssl/nsNSSIOLayer.h
@@ -163,17 +163,18 @@ private:
   uint64_t mPlaintextBytesRead;
 
   nsCOMPtr<nsIX509Cert> mClientCert;
 };
 
 class nsSSLIOLayerHelpers
 {
 public:
-  nsSSLIOLayerHelpers();
+  nsSSLIOLayerHelpers() : nsSSLIOLayerHelpers(0) {}
+  explicit nsSSLIOLayerHelpers(uint32_t aTlsFlags);
   ~nsSSLIOLayerHelpers();
 
   nsresult Init();
   void Cleanup();
 
   static bool nsSSLIOLayerInitialized;
   static PRDescIdentity nsSSLIOLayerIdentity;
   static PRDescIdentity nsSSLPlaintextLayerIdentity;
@@ -221,16 +222,17 @@ public:
   bool isPublic() const;
   void removeInsecureFallbackSite(const nsACString& hostname, uint16_t port);
   bool isInsecureFallbackSite(const nsACString& hostname);
 
   uint16_t mVersionFallbackLimit;
 private:
   mozilla::Mutex mutex;
   nsCOMPtr<nsIObserver> mPrefObserver;
+  uint32_t mTlsFlags;
 };
 
 nsresult nsSSLIOLayerNewSocket(int32_t family,
                                const char* host,
                                int32_t port,
                                nsIProxyInfo *proxy,
                                const OriginAttributes& originAttributes,
                                PRFileDesc** fd,
diff --git a/security/nss.symbols b/security/nss.symbols
--- a/security/nss.symbols
+++ b/security/nss.symbols
@@ -659,16 +659,17 @@ SSL_ClearSessionCache
 SSL_ConfigSecureServer
 SSL_ConfigSecureServerWithCertChain
 SSL_ConfigServerSessionIDCache
 SSL_ExportKeyingMaterial
 SSL_ForceHandshake
 SSL_GetChannelInfo
 SSL_GetCipherSuiteInfo
 SSL_GetClientAuthDataHook
+SSL_GetExperimentalAPI
 SSL_GetImplementedCiphers
 SSL_GetNextProto
 SSL_GetNumImplementedCiphers
 SSL_GetPreliminaryChannelInfo
 SSL_GetSRTPCipher
 SSL_GetStatistics
 SSL_HandshakeCallback
 SSL_HandshakeNegotiatedExtension
