diff -r 6f1914a4f241 netwerk/base/nsISocketTransport.idl
--- a/netwerk/base/nsISocketTransport.idl	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/base/nsISocketTransport.idl	Thu Aug 03 00:50:40 2017 -0700
@@ -238,6 +238,12 @@
     const unsigned long BE_CONSERVATIVE = (1 << 7);
 
     /**
+     * opaque flags for non-standard behavior of the TLS system
+     * do not set these unless you are a TLS developer.
+     */
+    attribute unsigned long tlsFlags;
+
+    /**
      * Socket QoS/ToS markings. Valid values are IPTOS_DSCP_AFxx or
      * IPTOS_CLASS_CSx (or IPTOS_DSCP_EF, but currently no supported
      * services require expedited-forwarding).
diff -r 6f1914a4f241 netwerk/base/nsSocketTransport2.cpp
--- a/netwerk/base/nsSocketTransport2.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/base/nsSocketTransport2.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -1225,7 +1225,7 @@
                                          mHttpsProxy ? mProxyHost.get() : host,
                                          mHttpsProxy ? mProxyPort : port,
                                          proxyInfo, mOriginAttributes,
-                                         controlFlags, &fd,
+                                         controlFlags, mTlsFlags, &fd,
                                          getter_AddRefs(secinfo));
 
                 if (NS_SUCCEEDED(rv) && !fd) {
@@ -1239,7 +1239,7 @@
                 // to the stack (such as pushing an io layer)
                 rv = provider->AddToSocket(mNetAddr.raw.family,
                                            host, port, proxyInfo,
-                                           mOriginAttributes, controlFlags, fd,
+                                           mOriginAttributes, controlFlags, mTlsFlags, fd,
                                            getter_AddRefs(secinfo));
             }
 
@@ -2985,6 +2985,20 @@
     return NS_OK;
 }
 
+NS_IMETHODIMP
+nsSocketTransport::GetTlsFlags(uint32_t *value)
+{
+    *value = mTlsFlags;
+    return NS_OK;
+}
+
+NS_IMETHODIMP
+nsSocketTransport::SetTlsFlags(uint32_t value)
+{
+    mTlsFlags = value;
+    return NS_OK;
+}
+
 void
 nsSocketTransport::OnKeepaliveEnabledPrefChange(bool aEnabled)
 {
diff -r 6f1914a4f241 netwerk/base/nsSocketTransport2.h
--- a/netwerk/base/nsSocketTransport2.h	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/base/nsSocketTransport2.h	Thu Aug 03 00:50:40 2017 -0700
@@ -308,6 +308,7 @@
     bool mProxyTransparentResolvesHost;
     bool mHttpsProxy;
     uint32_t     mConnectionFlags;
+    uint32_t     mTlsFlags;
     bool mReuseAddrPort;
 
     // The origin attributes are used to create sockets.  The first party domain
diff -r 6f1914a4f241 netwerk/ipc/NeckoChannelParams.ipdlh
--- a/netwerk/ipc/NeckoChannelParams.ipdlh	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/ipc/NeckoChannelParams.ipdlh	Thu Aug 03 00:50:40 2017 -0700
@@ -128,6 +128,7 @@
   bool                        allowSpdy;
   bool                        allowAltSvc;
   bool                        beConservative;
+  uint32_t                    tlsFlags;
   OptionalLoadInfoArgs        loadInfo;
   OptionalHttpResponseHead    synthesizedResponseHead;
   nsCString                   synthesizedSecurityInfoSerialization;
diff -r 6f1914a4f241 netwerk/protocol/http/HttpBaseChannel.cpp
--- a/netwerk/protocol/http/HttpBaseChannel.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/HttpBaseChannel.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -177,6 +177,7 @@
   , mAllowSpdy(true)
   , mAllowAltSvc(true)
   , mBeConservative(false)
+  , mTlsFlags(0)
   , mResponseTimeoutEnabled(true)
   , mAllRedirectsSameOrigin(true)
   , mAllRedirectsPassTimingAllowCheck(true)
@@ -2622,6 +2623,22 @@
 }
 
 NS_IMETHODIMP
+HttpBaseChannel::GetTlsFlags(uint32_t *aTlsFlags)
+{
+  NS_ENSURE_ARG_POINTER(aTlsFlags);
+
+  *aTlsFlags = mTlsFlags;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+HttpBaseChannel::SetTlsFlags(uint32_t aTlsFlags)
+{
+  mTlsFlags = aTlsFlags;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 HttpBaseChannel::GetApiRedirectToURI(nsIURI ** aResult)
 {
   NS_ENSURE_ARG_POINTER(aResult);
diff -r 6f1914a4f241 netwerk/protocol/http/HttpBaseChannel.h
--- a/netwerk/protocol/http/HttpBaseChannel.h	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/HttpBaseChannel.h	Thu Aug 03 00:50:40 2017 -0700
@@ -235,6 +235,8 @@
   NS_IMETHOD SetAllowAltSvc(bool aAllowAltSvc) override;
   NS_IMETHOD GetBeConservative(bool *aBeConservative) override;
   NS_IMETHOD SetBeConservative(bool aBeConservative) override;
+  NS_IMETHOD GetTlsFlags(uint32_t *aTlsFlags) override;
+  NS_IMETHOD SetTlsFlags(uint32_t aTlsFlags) override;
   NS_IMETHOD GetApiRedirectToURI(nsIURI * *aApiRedirectToURI) override;
   virtual MOZ_MUST_USE nsresult AddSecurityMessage(const nsAString &aMessageTag, const nsAString &aMessageCategory);
   NS_IMETHOD TakeAllSecurityMessages(nsCOMArray<nsISecurityConsoleMessage> &aMessages) override;
@@ -500,6 +502,9 @@
 
   Atomic<nsresult, ReleaseAcquire>  mStatus;
   uint32_t                          mLoadFlags;
+  // opaque flags for non-standard behavior of the TLS system
+  // do not set these unless you are a TLS developer.
+  uint32_t                          mTlsFlags;
   uint32_t                          mCaps;
   uint32_t                          mClassOfService;
   int16_t                           mPriority;
diff -r 6f1914a4f241 netwerk/protocol/http/HttpChannelChild.cpp
--- a/netwerk/protocol/http/HttpChannelChild.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/HttpChannelChild.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -2547,6 +2547,7 @@
   openArgs.allowSpdy() = mAllowSpdy;
   openArgs.allowAltSvc() = mAllowAltSvc;
   openArgs.beConservative() = mBeConservative;
+  openArgs.tlsFlags() = mTlsFlags;
   openArgs.initialRwin() = mInitialRwin;
 
   uint32_t cacheKey = 0;
diff -r 6f1914a4f241 netwerk/protocol/http/HttpChannelParent.cpp
--- a/netwerk/protocol/http/HttpChannelParent.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/HttpChannelParent.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -136,7 +136,7 @@
                        a.thirdPartyFlags(), a.resumeAt(), a.startPos(),
                        a.entityID(), a.chooseApplicationCache(),
                        a.appCacheClientID(), a.allowSpdy(), a.allowAltSvc(), a.beConservative(),
-                       a.loadInfo(), a.synthesizedResponseHead(),
+                       a.tlsFlags(), a.loadInfo(), a.synthesizedResponseHead(),
                        a.synthesizedSecurityInfoSerialization(),
                        a.cacheKey(), a.requestContextID(), a.preflightArgs(),
                        a.initialRwin(), a.blockAuthPrompt(),
@@ -457,6 +457,7 @@
                                  const bool&                allowSpdy,
                                  const bool&                allowAltSvc,
                                  const bool&                beConservative,
+                                 const uint32_t&            tlsFlags,
                                  const OptionalLoadInfoArgs& aLoadInfoArgs,
                                  const OptionalHttpResponseHead& aSynthesizedResponseHead,
                                  const nsCString&           aSecurityInfoSerialization,
@@ -683,6 +684,7 @@
   httpChannel->SetAllowSpdy(allowSpdy);
   httpChannel->SetAllowAltSvc(allowAltSvc);
   httpChannel->SetBeConservative(beConservative);
+  httpChannel->SetTlsFlags(tlsFlags);
   httpChannel->SetInitialRwin(aInitialRwin);
   httpChannel->SetBlockAuthPrompt(aBlockAuthPrompt);
 
diff -r 6f1914a4f241 netwerk/protocol/http/HttpChannelParent.h
--- a/netwerk/protocol/http/HttpChannelParent.h	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/HttpChannelParent.h	Thu Aug 03 00:50:40 2017 -0700
@@ -151,6 +151,7 @@
               const bool&                allowSpdy,
               const bool&                allowAltSvc,
               const bool&                beConservative,
+              const uint32_t&            tlsFlags,
               const OptionalLoadInfoArgs& aLoadInfoArgs,
               const OptionalHttpResponseHead& aSynthesizedResponseHead,
               const nsCString&           aSecurityInfoSerialization,
diff -r 6f1914a4f241 netwerk/protocol/http/TunnelUtils.cpp
--- a/netwerk/protocol/http/TunnelUtils.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/TunnelUtils.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -80,7 +80,7 @@
   if (provider && mFD) {
     mFD->secret = reinterpret_cast<PRFilePrivate *>(this);
     provider->AddToSocket(PR_AF_INET, aTLSHost, aTLSPort, nullptr,
-                          OriginAttributes(), 0, mFD,
+                          OriginAttributes(), 0, 0, mFD,
                           getter_AddRefs(mSecInfo));
   }
 
@@ -1547,6 +1547,8 @@
 FWD_TS_PTR(IsAlive, bool);
 FWD_TS_PTR(GetConnectionFlags, uint32_t);
 FWD_TS(SetConnectionFlags, uint32_t);
+FWD_TS_PTR(GetTlsFlags, uint32_t);
+FWD_TS(SetTlsFlags, uint32_t);
 FWD_TS_PTR(GetRecvBufferSize, uint32_t);
 FWD_TS(SetRecvBufferSize, uint32_t);
 
diff -r 6f1914a4f241 netwerk/protocol/http/nsHttpChannel.cpp
--- a/netwerk/protocol/http/nsHttpChannel.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/nsHttpChannel.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -495,6 +495,7 @@
     mConnectionInfo->SetPrivate(mPrivateBrowsing);
     mConnectionInfo->SetNoSpdy(mCaps & NS_HTTP_DISALLOW_SPDY);
     mConnectionInfo->SetBeConservative((mCaps & NS_HTTP_BE_CONSERVATIVE) || mBeConservative);
+    mConnectionInfo->SetTlsFlags(mTlsFlags);
 
     // Consider opening a TCP connection right away.
     SpeculativeConnect();
diff -r 6f1914a4f241 netwerk/protocol/http/nsHttpConnectionInfo.cpp
--- a/netwerk/protocol/http/nsHttpConnectionInfo.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/nsHttpConnectionInfo.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -146,8 +146,9 @@
     // byte 4 is I/. I is for insecure scheme on TLS for http:// uris
     // byte 5 is X/. X is for disallow_spdy flag
     // byte 6 is C/. C is for be Conservative
+    // byte 7-14 is for be tls flags
 
-    mHashKey.AssignLiteral(".......");
+    mHashKey.AssignLiteral("...............");
     mHashKey.Append(keyHost);
     if (!mNetworkInterfaceId.IsEmpty()) {
         mHashKey.Append('(');
@@ -259,6 +260,7 @@
     clone->SetInsecureScheme(GetInsecureScheme());
     clone->SetNoSpdy(GetNoSpdy());
     clone->SetBeConservative(GetBeConservative());
+    clone->SetTlsFlags(GetTlsFlags());
     MOZ_ASSERT(clone->Equals(this));
 
     return clone;
@@ -282,6 +284,7 @@
     clone->SetInsecureScheme(GetInsecureScheme());
     clone->SetNoSpdy(GetNoSpdy());
     clone->SetBeConservative(GetBeConservative());
+    clone->SetTlsFlags(GetTlsFlags());
     if (!mNetworkInterfaceId.IsEmpty()) {
         clone->SetNetworkInterfaceId(mNetworkInterfaceId);
     }
diff -r 6f1914a4f241 netwerk/protocol/http/nsHttpConnectionInfo.h
--- a/netwerk/protocol/http/nsHttpConnectionInfo.h	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/nsHttpConnectionInfo.h	Thu Aug 03 00:50:40 2017 -0700
@@ -122,6 +122,28 @@
                                             { mHashKey.SetCharAt(aBeConservative ? 'C' : '.', 6); }
     bool          GetBeConservative() const { return mHashKey.CharAt(6) == 'C'; }
 
+    void          SetTlsFlags(uint32_t aTlsFlags) {
+                      char buf[10];
+                      sprintf(buf, "%08x", aTlsFlags);
+                      for (unsigned int i = 0; i < strlen(buf); i++)
+                          mHashKey.SetCharAt(aTlsFlags, 7 + i);
+
+                      mHashKey.SetCharAt(aTlsFlags ? 'C' : '.', 6);
+                  }
+
+    uint32_t      GetTlsFlags() const {
+                      char buf[10];
+                      memset(buf, 0, sizeof(buf));
+
+                      for (int i = 0; i < 8; i++)
+                          buf[i] = mHashKey.CharAt(i + 7);
+
+                      uint32_t ret = 0;
+                      sscanf(buf, "%x", &ret);
+
+                      return ret;
+                  }
+
     const nsCString &GetNetworkInterfaceId() const { return mNetworkInterfaceId; }
 
     const nsCString &GetNPNToken() { return mNPNToken; }
diff -r 6f1914a4f241 netwerk/protocol/http/nsHttpConnectionMgr.cpp
--- a/netwerk/protocol/http/nsHttpConnectionMgr.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/nsHttpConnectionMgr.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -3783,6 +3783,7 @@
     }
 
     socketTransport->SetConnectionFlags(tmpFlags);
+    socketTransport->SetTlsFlags(ci->GetTlsFlags());
 
     const OriginAttributes& originAttributes = mEnt->mConnInfo->GetOriginAttributes();
     if (originAttributes != OriginAttributes()) {
diff -r 6f1914a4f241 netwerk/protocol/http/nsIHttpChannelInternal.idl
--- a/netwerk/protocol/http/nsIHttpChannelInternal.idl	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/protocol/http/nsIHttpChannelInternal.idl	Thu Aug 03 00:50:40 2017 -0700
@@ -216,6 +216,12 @@
      */
     [must_use] attribute boolean beConservative;
 
+    /**
+     * opaque flags for non-standard behavior of the TLS system
+     * do not set these unless you are a TLS developer.
+     */
+    [must_use] attribute unsigned long tlsFlags;
+
     [must_use] readonly attribute PRTime lastModifiedTime;
 
     /**
diff -r 6f1914a4f241 netwerk/socket/nsISSLSocketControl.idl
--- a/netwerk/socket/nsISSLSocketControl.idl	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/socket/nsISSLSocketControl.idl	Thu Aug 03 00:50:40 2017 -0700
@@ -102,6 +102,11 @@
      */
     readonly attribute uint32_t providerFlags;
 
+    /*
+     * The original TLS flags from the socket provider.
+     */
+    readonly attribute uint32_t providerTlsFlags;
+
     /* These values are defined by TLS. */
     const short SSL_VERSION_3   = 0x0300;
     const short TLS_VERSION_1   = 0x0301;
diff -r 6f1914a4f241 netwerk/socket/nsISocketProvider.idl
--- a/netwerk/socket/nsISocketProvider.idl	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/socket/nsISocketProvider.idl	Thu Aug 03 00:50:40 2017 -0700
@@ -35,6 +35,9 @@
      *        The proxy port for this connection.
      * @param aFlags
      *        Control flags that govern this connection (see below.)
+     * @param aTlsFlags
+     *        opaque flags for non-standard behavior of the TLS system
+     *        do not set these unless you are a TLS developer.
      * @param aFileDesc
      *        The resulting PRFileDesc.
      * @param aSecurityInfo
@@ -48,6 +51,7 @@
                    in nsIProxyInfo              aProxy,
                    in const_OriginAttributesRef aOriginAttributes,
                    in unsigned long             aFlags,
+                   in unsigned long             aTlsFlags,
                    out PRFileDescStar           aFileDesc, 
                    out nsISupports              aSecurityInfo);
 
@@ -68,6 +72,7 @@
                      in nsIProxyInfo              aProxy,
                      in const_OriginAttributesRef aOriginAttributes,
                      in unsigned long             aFlags,
+                     in unsigned long             aTlsFlags,
                      in PRFileDescStar            aFileDesc, 
                      out nsISupports              aSecurityInfo);
 
diff -r 6f1914a4f241 netwerk/socket/nsSOCKSIOLayer.cpp
--- a/netwerk/socket/nsSOCKSIOLayer.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/socket/nsSOCKSIOLayer.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -78,7 +78,8 @@
               int32_t family,
               nsIProxyInfo *proxy,
               const char *destinationHost,
-              uint32_t flags);
+              uint32_t flags,
+              uint32_t tlsFlags);
 
     void SetConnectTimeout(PRIntervalTime to);
     PRStatus DoHandshake(PRFileDesc *fd, int16_t oflags = -1);
@@ -216,6 +217,7 @@
     int32_t   mVersion;   // SOCKS version 4 or 5
     int32_t   mDestinationFamily;
     uint32_t  mFlags;
+    uint32_t  mTlsFlags;
     NetAddr   mInternalProxyAddr;
     NetAddr   mExternalProxyAddr;
     NetAddr   mDestinationAddr;
@@ -359,13 +361,14 @@
 
 
 void
-nsSOCKSSocketInfo::Init(int32_t version, int32_t family, nsIProxyInfo *proxy, const char *host, uint32_t flags)
+nsSOCKSSocketInfo::Init(int32_t version, int32_t family, nsIProxyInfo *proxy, const char *host, uint32_t flags, uint32_t tlsFlags)
 {
     mVersion         = version;
     mDestinationFamily = family;
     mProxy           = proxy;
     mDestinationHost = host;
     mFlags           = flags;
+    mTlsFlags        = tlsFlags;
     mProxy->GetUsername(mProxyUsername); // cache
 }
 
@@ -1518,6 +1521,7 @@
                           nsIProxyInfo *proxy,
                           int32_t socksVersion,
                           uint32_t flags,
+                          uint32_t tlsFlags,
                           PRFileDesc *fd,
                           nsISupports** info)
 {
@@ -1577,7 +1581,7 @@
     }
 
     NS_ADDREF(infoObject);
-    infoObject->Init(socksVersion, family, proxy, host, flags);
+    infoObject->Init(socksVersion, family, proxy, host, flags, tlsFlags);
     layer->secret = (PRFilePrivate*) infoObject;
 
     PRDescIdentity fdIdentity = PR_GetLayersIdentity(fd);
diff -r 6f1914a4f241 netwerk/socket/nsSOCKSIOLayer.h
--- a/netwerk/socket/nsSOCKSIOLayer.h	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/socket/nsSOCKSIOLayer.h	Thu Aug 03 00:50:40 2017 -0700
@@ -17,6 +17,7 @@
                                    nsIProxyInfo *proxyInfo,
                                    int32_t       socksVersion,
                                    uint32_t      flags,
+                                   uint32_t      tlsFlags,
                                    PRFileDesc   *fd,
                                    nsISupports **info);
 
diff -r 6f1914a4f241 netwerk/socket/nsSOCKSSocketProvider.cpp
--- a/netwerk/socket/nsSOCKSSocketProvider.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/socket/nsSOCKSSocketProvider.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -50,6 +50,7 @@
                                  nsIProxyInfo *proxy,
                                  const OriginAttributes &originAttributes,
                                  uint32_t flags,
+                                 uint32_t tlsFlags,
                                  PRFileDesc **result,
                                  nsISupports **socksInfo)
 {
@@ -75,6 +76,7 @@
                                             proxy,
                                             mVersion,
                                             flags,
+                                            tlsFlags,
                                             sock,
                                             socksInfo);
     if (NS_SUCCEEDED(rv)) {
@@ -92,6 +94,7 @@
                                    nsIProxyInfo *proxy,
                                    const OriginAttributes &originAttributes,
                                    uint32_t flags,
+                                   uint32_t tlsFlags,
                                    PRFileDesc *sock,
                                    nsISupports **socksInfo)
 {
@@ -101,6 +104,7 @@
                                             proxy,
                                             mVersion,
                                             flags,
+                                            tlsFlags,
                                             sock,
                                             socksInfo);
 
diff -r 6f1914a4f241 netwerk/socket/nsSocketProviderService.cpp
--- a/netwerk/socket/nsSocketProviderService.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/socket/nsSocketProviderService.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -43,3 +43,4 @@
 }
 
 ////////////////////////////////////////////////////////////////////////////////
+
diff -r 6f1914a4f241 netwerk/socket/nsUDPSocketProvider.cpp
--- a/netwerk/socket/nsUDPSocketProvider.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/netwerk/socket/nsUDPSocketProvider.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -21,6 +21,7 @@
                                nsIProxyInfo *aProxy,
                                const OriginAttributes &originAttributes,
                                uint32_t aFlags,
+                               uint32_t aTlsFlags,
                                PRFileDesc * *aFileDesc,
                                nsISupports **aSecurityInfo)
 {
@@ -41,6 +42,7 @@
                                  nsIProxyInfo *aProxy,
                                  const OriginAttributes &originAttributes,
                                  uint32_t aFlags,
+                                 uint32_t aTlsFlags,
                                  struct PRFileDesc * aFileDesc,
                                  nsISupports **aSecurityInfo)
 {
diff -r 6f1914a4f241 security/manager/ssl/nsNSSIOLayer.cpp
--- a/security/manager/ssl/nsNSSIOLayer.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/security/manager/ssl/nsNSSIOLayer.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -75,7 +75,7 @@
 
 extern LazyLogModule gPIPNSSLog;
 
-nsNSSSocketInfo::nsNSSSocketInfo(SharedSSLState& aState, uint32_t providerFlags)
+nsNSSSocketInfo::nsNSSSocketInfo(SharedSSLState& aState, uint32_t providerFlags, uint32_t providerTlsFlags)
   : mFd(nullptr),
     mCertVerificationState(before_cert_verification),
     mSharedState(aState),
@@ -99,6 +99,7 @@
     mMACAlgorithmUsed(nsISSLSocketControl::SSL_MAC_UNKNOWN),
     mBypassAuthentication(false),
     mProviderFlags(providerFlags),
+    mProviderTlsFlags(providerTlsFlags),
     mSocketCreationTimestamp(TimeStamp::Now()),
     mPlaintextBytesRead(0),
     mClientCert(nullptr)
@@ -123,6 +124,13 @@
 }
 
 NS_IMETHODIMP
+nsNSSSocketInfo::GetProviderTlsFlags(uint32_t* aProviderTlsFlags)
+{
+  *aProviderTlsFlags = mProviderTlsFlags;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 nsNSSSocketInfo::GetKEAUsed(int16_t* aKea)
 {
   *aKea = mKEAUsed;
@@ -1813,7 +1821,8 @@
                       PRFileDesc** fd,
                       nsISupports** info,
                       bool forSTARTTLS,
-                      uint32_t flags)
+                      uint32_t flags,
+                      uint32_t tlsFlags)
 {
 
   PRFileDesc* sock = PR_OpenTCPSocket(family);
@@ -1821,7 +1830,7 @@
 
   nsresult rv = nsSSLIOLayerAddToSocket(family, host, port, proxy,
                                         originAttributes, sock, info,
-                                        forSTARTTLS, flags);
+                                        forSTARTTLS, flags, tlsFlags);
   if (NS_FAILED(rv)) {
     PR_Close(sock);
     return rv;
@@ -2544,7 +2553,8 @@
                         PRFileDesc* fd,
                         nsISupports** info,
                         bool forSTARTTLS,
-                        uint32_t providerFlags)
+                        uint32_t providerFlags,
+                        uint32_t providerTlsFlags)
 {
   nsNSSShutDownPreventionLock locker;
   PRFileDesc* layer = nullptr;
@@ -2554,7 +2564,7 @@
 
   SharedSSLState* sharedState =
     providerFlags & nsISocketProvider::NO_PERMANENT_STORAGE ? PrivateSSLState() : PublicSSLState();
-  nsNSSSocketInfo* infoObject = new nsNSSSocketInfo(*sharedState, providerFlags);
+  nsNSSSocketInfo* infoObject = new nsNSSSocketInfo(*sharedState, providerFlags, providerTlsFlags);
   if (!infoObject) return NS_ERROR_FAILURE;
 
   NS_ADDREF(infoObject);
diff -r 6f1914a4f241 security/manager/ssl/nsNSSIOLayer.h
--- a/security/manager/ssl/nsNSSIOLayer.h	Wed Aug 02 17:11:51 2017 -0700
+++ b/security/manager/ssl/nsNSSIOLayer.h	Thu Aug 03 00:50:40 2017 -0700
@@ -35,7 +35,7 @@
                               public nsIClientAuthUserDecision
 {
 public:
-  nsNSSSocketInfo(mozilla::psm::SharedSSLState& aState, uint32_t providerFlags);
+  nsNSSSocketInfo(mozilla::psm::SharedSSLState& aState, uint32_t providerFlags, uint32_t providerTlsFlags);
 
   NS_DECL_ISUPPORTS_INHERITED
   NS_DECL_NSISSLSOCKETCONTROL
@@ -75,6 +75,7 @@
   void SetSentClientCert() { mSentClientCert = true; }
 
   uint32_t GetProviderFlags() const { return mProviderFlags; }
+  uint32_t GetProviderTlsFlags() const { return mProviderTlsFlags; }
 
   mozilla::psm::SharedSSLState& SharedState();
 
@@ -156,6 +157,7 @@
   bool    mBypassAuthentication;
 
   uint32_t mProviderFlags;
+  uint32_t mProviderTlsFlags;
   mozilla::TimeStamp mSocketCreationTimestamp;
   uint64_t mPlaintextBytesRead;
 
@@ -233,7 +235,8 @@
                                PRFileDesc** fd,
                                nsISupports** securityInfo,
                                bool forSTARTTLS,
-                               uint32_t flags);
+                               uint32_t flags,
+                               uint32_t tlsFlags);
 
 nsresult nsSSLIOLayerAddToSocket(int32_t family,
                                  const char* host,
@@ -243,7 +246,8 @@
                                  PRFileDesc* fd,
                                  nsISupports** securityInfo,
                                  bool forSTARTTLS,
-                                 uint32_t flags);
+                                 uint32_t flags,
+                                 uint32_t tlsFlags);
 
 nsresult nsSSLIOLayerFreeTLSIntolerantSites();
 nsresult displayUnknownCertErrorAlert(nsNSSSocketInfo* infoObject, int error);
diff -r 6f1914a4f241 security/manager/ssl/nsSSLSocketProvider.cpp
--- a/security/manager/ssl/nsSSLSocketProvider.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/security/manager/ssl/nsSSLSocketProvider.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -28,6 +28,7 @@
                                nsIProxyInfo *proxy,
                                const OriginAttributes &originAttributes,
                                uint32_t flags,
+                               uint32_t tlsFlags,
                                PRFileDesc **_result,
                                nsISupports **securityInfo)
 {
@@ -39,7 +40,8 @@
                                       _result,
                                       securityInfo,
                                       false,
-                                      flags);
+                                      flags,
+                                      tlsFlags);
   return (NS_FAILED(rv)) ? NS_ERROR_SOCKET_CREATE_FAILED : NS_OK;
 }
 
@@ -51,6 +53,7 @@
                                  nsIProxyInfo *proxy,
                                  const OriginAttributes &originAttributes,
                                  uint32_t flags,
+                                 uint32_t tlsFlags,
                                  PRFileDesc *aSocket,
                                  nsISupports **securityInfo)
 {
@@ -62,7 +65,8 @@
                                         aSocket,
                                         securityInfo,
                                         false,
-                                        flags);
+                                        flags,
+                                        tlsFlags);
 
   return (NS_FAILED(rv)) ? NS_ERROR_SOCKET_CREATE_FAILED : NS_OK;
 }
diff -r 6f1914a4f241 security/manager/ssl/nsTLSSocketProvider.cpp
--- a/security/manager/ssl/nsTLSSocketProvider.cpp	Wed Aug 02 17:11:51 2017 -0700
+++ b/security/manager/ssl/nsTLSSocketProvider.cpp	Thu Aug 03 00:50:40 2017 -0700
@@ -28,6 +28,7 @@
                                nsIProxyInfo *proxy,
                                const OriginAttributes &originAttributes,
                                uint32_t flags,
+                               uint32_t tlsFlags,
                                PRFileDesc **_result,
                                nsISupports **securityInfo)
 {
@@ -39,7 +40,8 @@
                                       _result,
                                       securityInfo,
                                       true,
-                                      flags);
+                                      flags,
+                                      tlsFlags);
 
   return (NS_FAILED(rv)) ? NS_ERROR_SOCKET_CREATE_FAILED : NS_OK;
 }
@@ -52,6 +54,7 @@
                                  nsIProxyInfo *proxy,
                                  const OriginAttributes &originAttributes,
                                  uint32_t flags,
+                                 uint32_t tlsFlags,
                                  PRFileDesc *aSocket,
                                  nsISupports **securityInfo)
 {
@@ -63,7 +66,8 @@
                                         aSocket,
                                         securityInfo,
                                         true,
-                                        flags);
+                                        flags,
+                                        tlsFlags);
 
   return (NS_FAILED(rv)) ? NS_ERROR_SOCKET_CREATE_FAILED : NS_OK;
 }
